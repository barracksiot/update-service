/*
 * MIT License
 *
 * Copyright (c) 2017 Barracks Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

buildscript {
    ext {
        springBootVersion = '1.3.3.RELEASE'
        gradleDockerVersion = '1.2'
        branch = (System.getenv("BRANCH_NAME") ?: "LOCAL")
        buildNumber = (System.getenv("BUILD_NUMBER") ?: "SNAPSHOT")
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "se.transmode.gradle:gradle-docker:${gradleDockerVersion}"
    }
}

plugins {
    id "net.linguica.maven-settings" version "0.5"
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'application'
apply plugin: 'docker'

group = projectGroup

sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = "io.barracks.updateservice.Application"

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://repo.spring.io/libs-milestone'
    }
    maven {
        name 'barracks'
        url "https://dl.bintray.com/barracksiot/libs/"
    }
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integration-test/java')
        resources.srcDir file('src/integration-test/resources')
    }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile 'org.springframework.boot:spring-boot-starter-data-rest'
    compile 'org.springframework.boot:spring-boot-starter-aop'
    compile 'org.springframework.data:spring-data-rest-hal-browser'
    compile 'org.springframework.data:spring-data-mongodb'
    compile 'io.barracks.libs:common-libs:0.0.5-1'
    compile "com.google.guava:guava:19.0"
    compile 'org.hibernate:hibernate-validator:4.2.0.Final'
    compile "org.mongodb.morphia:morphia:1.2.0"
    compile group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1'
    compile group: 'cz.jirutka.validator', name: 'validator-spring', version: '1.1.0'
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.16.10'
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testCompile 'com.jayway.jsonpath:json-path:2.2.0'
    testCompile "nl.jqno.equalsverifier:equalsverifier:2.0.2"
    testCompile "de.flapdoodle.embed:de.flapdoodle.embed.mongo:1.50.5"
    testCompile 'org.assertj:assertj-core:3.4.1'
    testCompile "org.json:json:20160212"
    testCompile 'io.barracks.libs:common-test-libs:0.0.5-1'
    integrationTestCompile 'org.springframework.boot:spring-boot-autoconfigure'
    integrationTestCompileOnly group: 'org.projectlombok', name: 'lombok', version: '1.16.10'

    integrationTestCompile sourceSets.main.output
    integrationTestCompile configurations.compile
    integrationTestCompile configurations.testCompile
    integrationTestRuntime configurations.runtime
    integrationTestRuntime configurations.testRuntime
}

jar {
    version = branch + '-' + buildNumber
}

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

jacoco {
    toolVersion = "0.7.6.201602180812"
}

test {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
    }
}

jacocoTestReport {
    executionData = fileTree(dir: "$buildDir/jacoco", include: '**/*.exec')
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task integrationTest(type: Test) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Runs the integration tests.'

    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath

    reports {
        html.destination = "$buildDir/reports/integration-test"
        junitXml.destination = "$buildDir/integration-test-results"
    }

    jacoco {
        destinationFile = file("$buildDir/jacoco-integration/jacoco.exec")
        classDumpFile = file("$buildDir/jacoco-integration/classpathdumps")
    }

    mustRunAfter tasks.test
}

task mergeTestReports(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn files("$buildDir/test-results/binary/test", "$buildDir/test-results/binary/integrationTest")
    mustRunAfter test
    mustRunAfter integrationTest
}

check.dependsOn jacocoTestReport
check.dependsOn integrationTest
check.dependsOn mergeTestReports

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}

task copyJar(type: Copy, dependsOn: build) {
    from jar
    into "build/docker"
}

task dist(type: Docker, dependsOn: copyJar) {
    push = false
    tagVersion = jar.version
    dockerfile = file('Dockerfile')
}

task deployVersion(type: Docker, dependsOn: copyJar) {
    push = true
    tagVersion = jar.version
    dockerfile = file('Dockerfile')
}

task deployLatest(type: Docker, dependsOn: copyJar) {
    push = true
    tagVersion = branch
    dockerfile = file('Dockerfile')
}

task deploy {
    dependsOn deployVersion, deployLatest
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}